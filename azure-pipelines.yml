trigger:
- main

variables:
  acrLoginServer: 'contenedormanualflask.azurecr.io'
  imageName: 'flask-app'
  imageTag: '$(Build.BuildId)'
  resourceGroup: 'rg-mi-app'
  containerName: 'flask-app-container'
  dnsNameLabel: 'mi-flask-app'
  acrUsername: 'contenedormanualflask'
  acrPassword: 'XtXQnVUWdGnCp3Va1yUpt6drXXYWKfzHubvONiWxQT+ACRAYR1b8'  

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build and Push'
  jobs:
  - job: Build
    steps:
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: build
        dockerfile: Dockerfile
        repository: '$(acrLoginServer)/$(imageName)'
        tags: |
          $(imageTag)
          latest

    - task: Docker@2
      displayName: 'Push to ACR'
      inputs:
        command: push
        repository: '$(acrLoginServer)/$(imageName)'
        tags: |
          $(imageTag)
          latest
        addPipelineData: false
        dockerRegistryEndpoint: ''

- stage: Deploy
  displayName: 'Deploy to ACI'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployACI
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureCLI@2
            displayName: 'Eliminar container anterior'
            inputs:
              azureSubscription: 'Azure-ServiceConnection'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az container delete \
                  --resource-group $(resourceGroup) \
                  --name $(containerName) \
                  --yes || true

          - task: AzureCLI@2
            displayName: 'Desplegar nuevo container'
            inputs:
              azureSubscription: 'Azure-ServiceConnection'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az container create \
                  --resource-group $(resourceGroup) \
                  --name $(containerName) \
                  --image $(acrLoginServer)/$(imageName):$(imageTag) \
                  --registry-login-server $(acrLoginServer) \
                  --registry-username $(acrUsername) \
                  --registry-password $(acrPassword) \
                  --dns-name-label $(dnsNameLabel) \
                  --ports 5000 \
                  --cpu 1 \
                  --memory 1 \
                  --os-type Linux
