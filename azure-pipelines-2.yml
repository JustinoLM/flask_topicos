trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'contenedormanualflask'
  azureSubscription: 'ASC'
  imageRepository: 'justinolmflasktopicos'
  containerRegistry: 'contenedormanualflask.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  resourceGroup: 'rg-mi-app'
  containerName: 'flask-app-container'
  dnsLabel: 'justinolmflaskversion2'
  port: '5000'
  location: 'eastus'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Local
    steps:
    - task: Docker@2
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  dependsOn: Build
  jobs:
  - job: DeployACI
    pool:
      name: Local
    steps:
    - task: AzureCLI@2
      displayName: Deploy to ACI
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          $acrName = "$(containerRegistry)".Split('.')[0]
          az acr login --name $acrName

          try {
            az container show --resource-group $(resourceGroup) --name $(containerName)
          } catch {
            Write-Host "Contenedor no encontrado, se procederá con la creación."
          }

          az container delete --resource-group $(resourceGroup) --name $(containerName) --yes

          Start-Sleep -Seconds 30

          az container create `
            --resource-group $(resourceGroup) `
            --name $(containerName) `
            --image "$(containerRegistry)/$(imageRepository):$(tag)" `
            --dns-name-label $(dnsLabel) `
            --ports $(port) `
            --location $(location) `
            --registry-login-server $(containerRegistry) `
            --registry-username "contenedormanualflask" `
            --registry-password "XtXQnVUWdGnCp3Va1yUpt6drXXYWKfzHubvONiWxQT+ACRAYR1b8" `
            --cpu 1 `
            --memory 1.5 `
            --restart-policy Always `
            --os-type Linux

          az container show --resource-group $(resourceGroup) --name $(containerName) --query "{FQDN:ipAddress.fqdn,State:containers[0].instanceView.currentState.state}" --output table
