trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'contenedormanualflask'
  azureSubscription: 'ASC'
  imageRepository: 'justinolmflasktopicos'
  containerRegistry: 'contenedormanualflask.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  resourceGroup: 'rg-mi-app'
  containerName: 'justino-flask-container'
  dnsLabel: 'justinolmflaskversion2'       # debe ser único en la región
  port: '80'
  location: 'eastus'


stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Local
    steps:
    - task: Docker@2
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  dependsOn: Build
  jobs:
  - job: DeployACI
    pool:
      name: Local
    steps:

    - task: AzureCLI@2
      displayName: Deploy to ACI
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          acrName=$(echo $(containerRegistry) | cut -d'.' -f1)
          az acr login --name $acrName


          az container show --resource-group $(resourceGroup) --name $(containerName) || true
          az container delete --resource-group $(resourceGroup) --name $(containerName) --yes --no-wait
          sleep 30

          az container create \
            --resource-group $(resourceGroup) \
            --name $(containerName) \
            --image $(containerRegistry)/$(imageRepository):$(tag) \
            --dns-name-label $(dnsLabel) \
            --ports $(port) \
            --assign-identity $(managedIdentityClientId) \
            --location $(location) \
            --registry-login-server $(containerRegistry) \
            --cpu 1 \
            --memory 1.5 \
            --restart-policy Always

          az container show --resource-group $(resourceGroup) --name $(containerName) --query "{FQDN:ipAddress.fqdn,State:containers[0].instanceView.currentState.state}" --output table
